{{ define "content" }}
<div class="container mx-auto p-4">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold">OS Images Management</h1>
        <div class="flex space-x-2">
            <button class="btn btn-primary" onclick="document.getElementById('downloadModal').showModal()">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                Download OS Image
            </button>
            <button class="btn btn-secondary" 
                    hx-post="/ipxe/update"
                    hx-swap="none"
                    hx-on::after-request="handleIPXEResponse(event)">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                </svg>
                Regenerate iPXE Config
            </button>
        </div>
    </div>

    <!-- Active Downloads -->
    {{if .Downloads}}
    <div class="card bg-base-100 shadow-xl mb-6">
        <div class="card-body">
            <h2 class="card-title">Active Downloads</h2>
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>OS</th>
                            <th>Version</th>
                            <th>Status</th>
                            <th>Progress</th>
                            <th>Started</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{range .Downloads}}
                        <tr>
                            <td>{{.OS}}</td>
                            <td>{{.Version}}</td>
                            <td>
                                <div class="badge badge-info">{{.Status}}</div>
                            </td>
                            <td>
                                <div class="w-24">
                                    <div class="bg-gray-200 rounded-full h-2">
                                        <div class="bg-blue-600 h-2 rounded-full" style="width: {{.Progress}}%"></div>
                                    </div>
                                    <span class="text-xs">{{.Progress}}%</span>
                                </div>
                            </td>
                            <td>{{.StartedAt.Format "15:04:05"}}</td>
                            <td>
                                {{if or (eq .Status "downloading") (eq .Status "queued")}}
                                <button class="btn btn-xs btn-error" 
                                        hx-post="/osimages/cancel/{{.ID}}"
                                        hx-confirm="Are you sure you want to cancel this download?">
                                    Cancel
                                </button>
                                {{end}}
                            </td>
                        </tr>
                        {{end}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    {{end}}

    <!-- OS Images List -->
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <h2 class="card-title">Available OS Images</h2>
            
            {{if .OSImages}}
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>OS</th>
                            <th>Version</th>
                            <th>Architecture</th>
                            <th>Kernel Size</th>
                            <th>Initrd Size</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{range .OSImages}}
                        <tr>
                            <td>
                                <div class="flex items-center space-x-2">
                                    {{if eq .OS "ubuntu"}}
                                        <div class="w-6 h-6 bg-orange-500 rounded text-white text-xs flex items-center justify-center font-bold">U</div>
                                    {{else if eq .OS "centos"}}
                                        <div class="w-6 h-6 bg-purple-600 rounded text-white text-xs flex items-center justify-center font-bold">C</div>
                                    {{else if eq .OS "nixos"}}
                                        <div class="w-6 h-6 bg-blue-600 rounded text-white text-xs flex items-center justify-center font-bold">N</div>
                                    {{end}}
                                    <span class="capitalize">{{.OS}}</span>
                                </div>
                            </td>
                            <td><span class="badge badge-outline">{{.Version}}</span></td>
                            <td>{{.Architecture}}</td>
                            <td>{{if .KernelSize}}<span id="kernel-size-{{.ID}}">{{.KernelSize}} bytes</span>{{else}}--{{end}}</td>
                            <td>{{if .InitrdSize}}<span id="initrd-size-{{.ID}}">{{.InitrdSize}} bytes</span>{{else}}--{{end}}</td>
                            <td>{{.CreatedAt.Format "2006-01-02 15:04"}}</td>
                            <td>
                                <div class="flex space-x-1">
                                    <button class="btn btn-xs btn-info" 
                                            onclick="showOSImageInfo('{{.ID}}')">
                                        Info
                                    </button>
                                    {{if not .Active}}
                                    <button class="btn btn-xs btn-error" 
                                            hx-delete="/osimages/delete/{{.ID}}"
                                            hx-target="#main-content"
                                            hx-swap="outerHTML"
                                            hx-confirm="Are you sure you want to delete this OS image?">
                                        Delete
                                    </button>
                                    {{end}}
                                </div>
                            </td>
                        </tr>
                        {{end}}
                    </tbody>
                </table>
            </div>
            {{else}}
            <div class="text-center py-8">
                <div class="text-gray-500 mb-4">
                    <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-700 mb-2">No OS Images Available</h3>
                <p class="text-gray-500 mb-4">Download your first OS image to get started</p>
                <button class="btn btn-primary" onclick="document.getElementById('downloadModal').showModal()">
                    Download OS Image
                </button>
            </div>
            {{end}}
        </div>
    </div>
</div>

<!-- Download Modal -->
<dialog id="downloadModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg mb-4">Download OS Image</h3>
        <form hx-post="/osimages/download" hx-swap="none" hx-on::after-request="handleDownloadResponse(event)">
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Operating System</span>
                </label>
                <select name="os" class="select select-bordered w-full" required onchange="updateVersions(this.value)">
                    <option value="">Select OS</option>
                    <option value="ubuntu">Ubuntu</option>
                    <option value="centos">CentOS</option>
                    <option value="nixos">NixOS</option>
                </select>
            </div>
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Version</span>
                </label>
                <select name="version" id="versionSelect" class="select select-bordered w-full" required>
                    <option value="">Select version first</option>
                </select>
            </div>
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Architecture</span>
                </label>
                <select name="architecture" class="select select-bordered w-full">
                    <option value="x86_64">x86_64</option>
                    <option value="arm64">ARM64</option>
                </select>
            </div>
            
            <div class="modal-action">
                <button type="button" class="btn" onclick="document.getElementById('downloadModal').close()">Cancel</button>
                <button type="submit" class="btn btn-primary">Start Download</button>
            </div>
        </form>
    </div>
</dialog>

<!-- OS Image Info Modal -->
<dialog id="infoModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg mb-4">OS Image Information</h3>
        <div id="osImageInfo">
            <!-- Content will be loaded here -->
        </div>
        <div class="modal-action">
            <button type="button" class="btn" onclick="document.getElementById('infoModal').close()">Close</button>
        </div>
    </div>
</dialog>

<script>
function updateVersions(os) {
    const versionSelect = document.getElementById('versionSelect');
    versionSelect.innerHTML = '<option value="">Select version</option>';
    
    if (!os) return;
    
    fetch(`/osimages/available-versions?os=${os}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to fetch versions');
            }
            return response.json();
        })
        .then(versions => {
            versions.forEach(versionInfo => {
                const option = document.createElement('option');
                option.value = versionInfo.value;
                option.textContent = versionInfo.display_name;
                versionSelect.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error fetching versions:', error);
            // Optional: show error message
        });
}

function showOSImageInfo(imageId) {
    fetch(`/osimages/info/${imageId}`)
        .then(response => response.json())
        .then(data => {
            const infoDiv = document.getElementById('osImageInfo');
            infoDiv.innerHTML = `
                <div class="space-y-3">
                    <div><strong>ID:</strong> ${data.id}</div>
                    <div><strong>OS:</strong> ${data.os}</div>
                    <div><strong>Version:</strong> ${data.version}</div>
                    <div><strong>Architecture:</strong> ${data.architecture}</div>
                    <div><strong>Kernel Path:</strong> ${data.kernel_path}</div>
                    <div><strong>Initrd Path:</strong> ${data.initrd_path}</div>
                    <div><strong>Kernel Size:</strong> ${formatBytes(data.kernel_size)}</div>
                    <div><strong>Initrd Size:</strong> ${formatBytes(data.initrd_size)}</div>
                    <div><strong>Checksum:</strong> <code class="text-xs">${data.checksum}</code></div>
                    <div><strong>Created:</strong> ${new Date(data.created_at).toLocaleString()}</div>
                    <div><strong>Updated:</strong> ${new Date(data.updated_at).toLocaleString()}</div>
                </div>
            `;
            document.getElementById('infoModal').showModal();
        })
        .catch(error => {
            console.error('Error fetching OS image info:', error);
            alert('Failed to load OS image information');
        });
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function handleDownloadResponse(event) {
    const xhr = event.detail.xhr;
    if (xhr.status === 200) {
        try {
            const response = JSON.parse(xhr.responseText);
            if (response.status === 'started') {
                // Close modal
                document.getElementById('downloadModal').close();
                
                // Show success message
                Toastify({
                    text: response.message,
                    duration: 5000,
                    close: true,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
                }).showToast();
                
                // Refresh the page after a short delay to show updated list
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            }
        } catch (e) {
            console.error('Error parsing response:', e);
        }
    }
}

function handleIPXEResponse(event) {
    const xhr = event.detail.xhr;
    if (xhr.status === 200) {
        // Show success message
        Toastify({
            text: "iPXE configuration regenerated successfully",
            duration: 3000,
            close: true,
            gravity: "top",
            position: "right",
            backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
        }).showToast();
    } else {
        // Show error message
        Toastify({
            text: "Failed to regenerate iPXE configuration",
            duration: 5000,
            close: true,
            gravity: "top",
            position: "right",
            backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
        }).showToast();
    }
}

// Format file sizes on page load
document.addEventListener('DOMContentLoaded', function() {
    // Format all kernel and initrd sizes
    document.querySelectorAll('[id^="kernel-size-"], [id^="initrd-size-"]').forEach(function(element) {
        const sizeText = element.textContent;
        const sizeMatch = sizeText.match(/(\d+) bytes/);
        if (sizeMatch) {
            const bytes = parseInt(sizeMatch[1]);
            element.textContent = formatBytes(bytes);
        }
    });
});

// Auto-refresh download status every 5 seconds if there are active downloads
{{if .Downloads}}
setInterval(() => {
    htmx.trigger('#main-content', 'refresh');
}, 5000);
{{end}}
</script>
{{ end }}