{{define "content"}}
<div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold">DHCP Servers</h1>
    <button id="new-dhcp-btn" 
        hx-get="/open_modal?template=dhcpmodal" 
        hx-target="#modal-content" 
        hx-swap="innerHTML"
        class="btn btn-primary">
        <i class="fas fa-plus mr-2"></i>
        New DHCP Server
    </button>
</div>

<!-- Placeholder for modal -->
<div id="modal-content"></div>

{{range .Servers}}
<div class="card bg-neutral shadow-xl mb-8">
    <div class="card-body overflow-visible">
        <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-3">
                <span class="ip-address text-2xl font-bold text-primary">{{ .TFTPIP }}</span>
                <span class="badge {{ .Status }} badge-lg"></span>
            </div>
            <div class="flex items-center space-x-2">
                <button class="btn btn-sm btn-success tooltip tooltip-bottom" data-tip="Start Server" hx-post="/dhcp/start?server_id={{ .ID }}" hx-target="body" hx-swap="innerHTML"><i class="fas fa-play"></i></button>
                <button class="btn btn-sm btn-error tooltip tooltip-bottom" data-tip="Stop Server" hx-post="/dhcp/stop?server_id={{ .ID }}" hx-target="body" hx-swap="innerHTML"><i class="fas fa-stop"></i></button>
                <button class="btn btn-sm btn-info tooltip tooltip-bottom" data-tip="Edit Server" hx-get="/open_modal?template=dhcpmodal&server_id={{ .ID }}" hx-target="#modal-content" hx-swap="innerHTML"><i class="fas fa-edit"></i></button>
                <button class="btn btn-sm btn-warning tooltip tooltip-bottom" data-tip="Delete Server" hx-post="/dhcp/delete?server_id={{ .ID }}" hx-target="body" hx-swap="innerHTML"><i class="fas fa-trash"></i></button>
            </div>
        </div>

        <div style="overflow: visible;">
            <table class="table w-full">
                <thead>
                    <tr>
                        <th>MAC Address</th>
                        <th>IP Address</th>
                        <th class="text-center">State</th>
                        <th class="text-center">Reserved</th>
                        <th class="text-center">BootMenu</th>
                        <th class="text-center">IPMI</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {{ $tftpip := .TFTPIP }}
                    {{range .Leases}}
                    <tr>
                        <td>{{ .MAC }}</td>
                        <td>{{ .IP }}</td>
                        <td class="text-center">
                            <div class="badge {{.StateBadgeClass}} badge-sm">{{.StateDisplayName}}</div>
                        </td>
                        <td class="text-center">
                            <button id="reserveBtn-{{ .MAC }}" class="modal-opener tooltip tooltip-top" data-tip="{{if .Static}}Reserved IP{{else}}Reserve IP{{end}}" hx-get="/open_modal?template=reservemodal&network={{$tftpip}}&mac={{.MAC}}" hx-target="#modal-content" hx-swap="innerHTML">
                                {{if .Static}}
                                    <i class="fas fa-check-circle text-success text-lg"></i>
                                {{else}}
                                    <i class="fas fa-times-circle text-error text-lg"></i>
                                {{end}}
                            </button>
                        </td>
                        <td class="text-center">
                            <button hx-get="/open_modal?template=bootmodal&network={{$tftpip}}&mac={{.MAC}}" hx-target="#modal-content" hx-swap="innerHTML" id="bootMenuBtn-{{ .MAC }}" class="btn btn-xs tooltip tooltip-top {{if .Menu.Filename}}btn-accent{{else}}btn-ghost{{end}}" data-tip="Configure Boot Menu">Configure</button>
                        </td>
                        <td class="text-center">
                            <button hx-get="/open_modal?template=ipmimodal&network={{$tftpip}}&mac={{.MAC}}" hx-target="#modal-content" hx-swap="innerHTML" id="ipmiBtn-{{ .MAC }}" class="btn btn-xs tooltip tooltip-top {{if .IPMI.Username}}btn-accent{{else}}btn-ghost{{end}}" data-tip="Configure IPMI">Configure</button>
                        </td>
                        <td class="text-center">
                            <div class="flex space-x-1">
                                <div class="dropdown dropdown-end dropdown-top">
                                    <button class="btn btn-xs btn-info tooltip tooltip-top" data-tip="Change State" tabindex="0">
                                        <i class="fas fa-flag"></i>
                                    </button>
                                    <ul tabindex="0" class="dropdown-content z-[9999] menu p-2 shadow bg-base-100 rounded-box w-52">
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'assigned')">üîµ Assigned</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'pxe_requested')">‚ö†Ô∏è PXE Requested</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'booting')">üöÄ Booting</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'imaging')">üíø Imaging</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'imaged')">‚úÖ Imaged</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'configuring')">‚öôÔ∏è Configuring</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'complete')">üéâ Complete</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'failed')">‚ùå Failed</a></li>
                                        <li><a onclick="updateLeaseState('{{.MAC}}', 'offline')">üëª Offline</a></li>
                                    </ul>
                                </div>
                                <button class="btn btn-xs btn-secondary tooltip tooltip-top" data-tip="View History" onclick="showLeaseHistory('{{.MAC}}')">
                                    <i class="fas fa-file-text"></i>
                                </button>
                                <button class="btn btn-xs btn-error tooltip tooltip-top" data-tip="Delete Lease" hx-post="/dhcp/delete_lease?mac={{.MAC}}" hx-target="body" hx-swap="innerHTML" hx-confirm="Are you sure you want to delete this lease?">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    {{end}}
                </tbody>
            </table>
            <div class="mt-4 flex justify-center">
                <button class="btn btn-sm btn-primary" hx-get="/open_modal?template=manualleasemodal&network={{ .TFTPIP }}" hx-target="#modal-content" hx-swap="innerHTML">
                    <i class="fas fa-plus mr-2"></i>
                    Add Manual Entry
                </button>
            </div>
        </div>
    </div>
</div>
{{end}}

<script>
function updateLeaseState(mac, newState) {
    if (!newState) return;
    
    const formData = new FormData();
    formData.append('state', newState);
    formData.append('source', 'manual');
    
    fetch('/dhcp/lease/state?mac=' + encodeURIComponent(mac), {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            // Refresh the page to show updated state
            window.location.reload();
        } else {
            alert('Failed to update lease state: ' + (data.message || 'Unknown error'));
        }
    })
    .catch(error => {
        console.error('Error updating lease state:', error);
        alert('Failed to update lease state');
    });
}

function showLeaseHistory(mac) {
    fetch('/dhcp/lease/history?mac=' + encodeURIComponent(mac))
    .then(response => response.json())
    .then(data => {
        // Create modal content
        const modalContent = `
            <div class="modal modal-open">
                <div class="modal-box">
                    <h3 class="font-bold text-lg">Lease History for ${mac}</h3>
                    <div class="py-4">
                        ${data.history && data.history.length > 0 
                            ? data.history.map(entry => `
                                <div class="flex justify-between items-center py-2 border-b">
                                    <div class="flex flex-col">
                                        <div class="flex space-x-2">
                                            ${entry.from_state ? `<span class="badge badge-ghost badge-xs">${entry.from_state}</span>` : ''}
                                            ${entry.from_state ? '<i class="fas fa-arrow-right text-xs"></i>' : ''}
                                            <span class="badge ${getStateBadgeClass(entry.to_state)} badge-sm">${entry.to_state}</span>
                                        </div>
                                        <span class="text-xs text-base-content/50">${entry.source}</span>
                                    </div>
                                    <span class="text-sm text-base-content/70">${new Date(entry.timestamp).toLocaleString()}</span>
                                </div>
                            `).join('')
                            : '<p class="text-base-content/70">No history available for this lease.</p>'
                        }
                    </div>
                    <div class="modal-action">
                        <button class="btn" onclick="closeHistoryModal()">Close</button>
                    </div>
                </div>
            </div>
        `;
        
        // Add modal to page
        document.body.insertAdjacentHTML('beforeend', modalContent);
    })
    .catch(error => {
        console.error('Error fetching lease history:', error);
        alert('Failed to load lease history');
    });
}

function closeHistoryModal() {
    const modal = document.querySelector('.modal.modal-open');
    if (modal) {
        modal.remove();
    }
}

function getStateBadgeClass(state) {
    const stateClasses = {
        'assigned': 'badge-info',
        'pxe_requested': 'badge-warning',
        'booting': 'badge-primary',
        'imaging': 'badge-secondary',
        'imaged': 'badge-success',
        'configuring': 'badge-accent',
        'complete': 'badge-success',
        'failed': 'badge-error',
        'offline': 'badge-ghost'
    };
    return stateClasses[state] || 'badge-ghost';
}
</script>
{{end}}